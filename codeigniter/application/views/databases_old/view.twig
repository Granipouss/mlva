{% extends "layout/base.twig" %}

{% block title %}View {{ base.name }}{% endblock %}
{% set menu = "databases" %}

{% block content %}
  <div class="row">
    <div class="col-sm-12">
      {% include "databases/inc/header.twig" %}
      {% if base.description %}
        <div class="col-xs-12 col-sm-6">
          <h4>Description:</h4>
          <p>{{ auto_link_publication(base.description) }}</p>
        </div>
      {% endif %}
      {% if base.website %}
        <div class="col-xs-12 col-sm-6">
          <h4>Support Website:</h4>
          <p>{{ safe_auto_link(base.website) }}</p>
        </div>
      {% endif %}
    </div>
  </div>
</div>

<div id="app">
  <div class="container">
    <div class="row">
      <div class="col-xs-12"><p>
        Columns (click to hide) :
        <span id="base_url" data-url="{{ base_url() }}"></span>
        <a role="button" :class="keyVisibility ? '' : 'text-muted'" @click="toggleKey">Key</a>
        <template  v-for="(v, md) in allMetadata">
          - <a role="button" :class="v ? '' : 'text-muted'" @click="toggle(md)">${ md }</a>
        </template>
      </p></div>
    </div>
  </div>

  <!-- Pagination -->
  <div class="container" v-if="nbPages > 0">
    <div class="col-xs-12">
      <nav>
        <ul class="pager btn-lg">
          <li><a v-if="currentPage > 1" @click="goTo(currentPage - 1)"><span class="glyphicon glyphicon glyphicon-chevron-left" aria-hidden="true"></span></a></li>
          <li v-for="i in nbPages">
            <a v-if="i !== currentPage" @click="goTo(i)">${ i }</a>
            <span v-else class="btn active btn-lg">${ i }</span>
          </li>
          <li><a v-if="currentPage < nbPages" @click="goTo(currentPage + 1)"><span class="glyphicon glyphicon glyphicon-chevron-right" aria-hidden="true"></span></a></li>
        </ul>
      </nav>
    </div>
  </div>

  <div class="database">
    <table class="table table-condensed table-striped">
      <thead>
        <tr>
          <th @click="setSortBy('key')" class="colkey" v-if="keyVisibility">
            Key
            <span v-if="sortBy === 'key'" :class="'glyphicon glyphicon-triangle-' + (order > 0 ? 'top' : 'bottom')" aria-hidden="true"></span>
          </th>
          <th @click="setSortBy('meta-' + md)" v-for="md in metadata">
            ${ md }
            <span v-if="sortBy === 'meta-' + md" :class="'glyphicon glyphicon-triangle-' + (order > 0 ? 'top' : 'bottom')" aria-hidden="true"></span>
          </th>
          <th @click="setSortBy(bd)" class="marker" v-for="bd in basedata">
            ${ bd }
            <span v-if="sortBy === bd" :class="'glyphicon glyphicon-triangle-' + (order > 0 ? 'top' : 'bottom')" aria-hidden="true"></span>
          </th>
        </tr>
      </thead>

      <tbody>
        <tr v-for="strain in strains">
          <td>${ strain.name }</td>
          <td v-for="md in metadata" v-html="autolink(strain.metadata[md])"></td>
          <td class="marker" v-for="bd in basedata" :style="colorMaker(strain.data[bd])">${ strain.data[bd] }</td>
        </tr>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div class="container" v-if="nbPages > 0">
    <div class="col-xs-12">
      <nav>
        <ul class="pager btn-lg">
          <li><a v-if="currentPage > 1" @click="goTo(currentPage - 1)"><span class="glyphicon glyphicon glyphicon-chevron-left" aria-hidden="true"></span></a></li>
          <li v-for="i in nbPages">
            <a v-if="i !== currentPage" @click="goTo(i)">${ i }</a>
            <span v-else class="btn active btn-lg">${ i }</span>
          </li>
          <li><a v-if="currentPage < nbPages" @click="goTo(currentPage + 1)"><span class="glyphicon glyphicon glyphicon-chevron-right" aria-hidden="true"></span></a></li>
        </ul>
      </nav>
    </div>
  </div>

</div>

<div class="container">
{% endblock %}

{% block footer_js %}
{{ parent () }}

<script src="https://unpkg.com/vue" charset="utf-8"></script>
<script src="{{ base_url('dist/js/utils.js') }}"></script>

<script type="text/javascript">
  /* global Vue, $ */
  /* global getUrlParam, setUrlParam */
  /* global autolink, LightenDarkenColor */

  const baseUrl = '{{ base_url() }}'
  const metadata = JSON.parse('{{ base.metadata | json_encode | raw }}')
  const basedata = JSON.parse('{{ filter.data | json_encode | raw }}')

  const panels = JSON.parse(`{{ panels | json_encode | raw }}`)
  const databaseInfos = JSON.parse(`{{ base | json_encode | raw }}`)
  const ownerInfos = JSON.parse(`{{ owner | json_encode | raw }}`)

  const app = new Vue({
    delimiters: ['${', '}'],
    el: '#app',
    data () {
      let data = {
        currentPage: getUrlParam('page', 1) | 0,
        perPage: 20,
        allStrains: [],
        basedata,
        allMetadata: {},
        keyVisibility: true,
        order: getUrlParam('sortingOrder', 'asc') === 'asc' ? 0 : 1,
        sortBy: getUrlParam('sortBy', 'key')
      }
      for (let md of metadata) data.allMetadata[md] = true
      for (let md of metadata) data.order[md] = 0
      for (let bd of basedata) data.order[bd] = 0
      return data
    },
    filters: { autolink },
    computed: {
      metadata () { return Object.keys(this.allMetadata).filter(md => this.allMetadata[md]) },
      nbPages () { return 1 + (this.allStrains.length / this.perPage) | 0 },
      strains () {
        return this.allStrains
          .sort((a, b) => {
            if (this.sortBy === 'key') {
              a = a.name; b = b.name
            } else if (this.sortBy.startsWith('meta-')) {
              let md = this.sortBy.replace('meta-', '')
              a = a.metadata[md]; b = b.metadata[md]
            } else {
              a = a.data[this.sortBy]; b = b.data[this.sortBy]
            }
            return (a === b ? 0 : a > b ? 1 : -1) * this.order
          })
          .slice(this.perPage * (this.currentPage - 1), this.perPage * this.currentPage)
      }
    },
    methods: {
      autolink,
      toggle (md) {
        this.allMetadata[md] = !this.allMetadata[md]
        $.get(baseUrl + '/ajax/mask', { col: md })
      },
      toggleKey () { this.keyVisibility = !this.keyVisibility },
      goTo (i) {
        this.currentPage = Math.min(Math.max(1, i), this.nbPages)
        setUrlParam('page', this.currentPage)
      },
      setSortBy (value) {
        this.goTo(1)
        if (this.sortBy === value) {
          this.order *= -1
        } else {
          this.sortBy = value
          this.order = 1
        }
        setUrlParam('sortingOrder', this.order > 0 ? 'asc' : 'desc')
        setUrlParam('sortBy', this.sortBy)
      },
      colorMaker (value) {
        const max = 10
        let x = Math.min(parseInt(value), max) / max
        let r = parseInt(x * 240 + (1 - x) * 30)
        let g = parseInt(x * 30 + (1 - x) * 240)
        let b = parseInt(x * 0 + (1 - x) * 0)
        var hex = ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)
        return {
          color: '#' + hex,
          background: '#' + LightenDarkenColor(hex, 50),
          fontWeight: 'bold'
        }
      }
    }
  })

  $.get(baseUrl + 'ajax/test', data => { app.allStrains = data })
</script>
{% endblock %}
